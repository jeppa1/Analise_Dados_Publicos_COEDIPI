{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO+KlhyKafS60ykn/hgGZ/v",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jeppa1/Analise_Dados_Publicos_COEDIPI/blob/main/An%C3%A1lise_Delegados_COEDIPI\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "bAC5vjUTdg3O"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "\n",
        "# Passo 1: Iniciar o upload dos arquivos\n",
        "# Ao executar esta célula, um botão \"Escolher arquivos\" aparecerá.\n",
        "# Selecione os DOIS arquivos CSV ao mesmo tempo (segurando Ctrl ou Shift).\n",
        "print(\"Por favor, envie os dois arquivos CSV ('Suplentes...' e 'Sistematização...').\")\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Nomes exatos dos arquivos\n",
        "arquivo_suplentes = 'Suplentes de Sistematização Delegados 6ª CEDPI (respostas) - Respostas ao formulário 1.csv'\n",
        "arquivo_delegados = 'Sistematização Delegados 6ª CEDPI (respostas) - Respostas ao formulário 1.csv'\n",
        "\n",
        "# Passo 2: Verificar e concatenar os arquivos\n",
        "try:\n",
        "    # Carrega os arquivos enviados para o pandas\n",
        "    df1 = pd.read_csv(arquivo_suplentes)\n",
        "    df2 = pd.read_csv(arquivo_delegados)\n",
        "\n",
        "    print(\"\\n✅ Arquivos encontrados! Verificando a estrutura...\")\n",
        "\n",
        "    # Verifica se as colunas são idênticas\n",
        "    if df1.columns.equals(df2.columns):\n",
        "        # Concatena (junta) os dois dataframes\n",
        "        df_concatenado = pd.concat([df1, df2], ignore_index=True)\n",
        "\n",
        "        # Nome do arquivo de saída\n",
        "        arquivo_final = 'dados_concatenados.csv'\n",
        "\n",
        "        # Salva o resultado em um novo arquivo CSV\n",
        "        df_concatenado.to_csv(arquivo_final, index=False)\n",
        "\n",
        "        print(f\"✅ Sucesso! Os arquivos foram concatenados.\")\n",
        "        print(f\"O resultado foi salvo como '{arquivo_final}'.\")\n",
        "\n",
        "        # Passo 3: Oferecer o download do arquivo final\n",
        "        print(\"\\nIniciando o download do arquivo concatenado...\")\n",
        "        files.download(arquivo_final)\n",
        "\n",
        "    else:\n",
        "        print(\"❌ Erro: As colunas dos arquivos são diferentes e não podem ser combinadas.\")\n",
        "        print(f\"\\nColunas do arquivo de Suplentes: {list(df1.columns)}\")\n",
        "        print(f\"\\nColunas do arquivo de Delegados: {list(df2.columns)}\")\n",
        "\n",
        "except FileNotFoundError as e:\n",
        "    print(f\"\\n❌ Erro: Um dos arquivos não foi encontrado após o upload.\")\n",
        "    print(\"Verifique se o nome do arquivo que você enviou é EXATAMENTE igual ao que está no código.\")\n",
        "    print(f\"Arquivo que não foi encontrado: {e.filename}\")\n",
        "except Exception as e:\n",
        "    print(f\"\\n❌ Ocorreu um erro inesperado: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        },
        "id": "1dyx5waBe2Q5",
        "outputId": "205bfddb-aa2d-4197-c643-9de44c57f2ec"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Por favor, envie os dois arquivos CSV ('Suplentes...' e 'Sistematização...').\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-9dcd4f6e-c18a-4de0-9ad2-7b18144e2d03\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-9dcd4f6e-c18a-4de0-9ad2-7b18144e2d03\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "✅ Arquivos encontrados! Verificando a estrutura...\n",
            "✅ Sucesso! Os arquivos foram concatenados.\n",
            "O resultado foi salvo como 'dados_concatenados.csv'.\n",
            "\n",
            "Iniciando o download do arquivo concatenado...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_b65e7c73-17db-4d95-9184-0734bae95572\", \"dados_concatenados.csv\", 16601)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from google.colab import auth\n",
        "import gspread\n",
        "\n",
        "# Passo 1: Autenticação da sua conta Google\n",
        "# Ao executar esta linha, uma janela pop-up aparecerá pedindo permissão\n",
        "# para que o Colab acesse seus arquivos do Google Drive/Planilhas.\n",
        "print(\"Permita o acesso à sua conta Google para continuar...\")\n",
        "auth.authenticate_user()\n",
        "\n",
        "# Autoriza a biblioteca gspread a usar suas credenciais\n",
        "from google.auth import default\n",
        "creds, _ = default()\n",
        "gc = gspread.authorize(creds)\n",
        "\n",
        "print(\"\\n✅ Autenticação concluída com sucesso!\")\n",
        "\n",
        "# --- MANIPULAÇÃO DA PLANILHA ---\n",
        "\n",
        "# Passo 2: Abra sua planilha pelo NOME\n",
        "# Certifique-se de que o nome é exatamente igual ao que está no seu Google Drive.\n",
        "nome_da_planilha = 'dados_concatenados'\n",
        "\n",
        "try:\n",
        "    print(f\"\\nProcurando a planilha '{nome_da_planilha}'...\")\n",
        "    spreadsheet = gc.open(nome_da_planilha)\n",
        "    worksheet = spreadsheet.sheet1 # Acessa a primeira página (aba) da planilha\n",
        "\n",
        "    print(\"✅ Planilha encontrada! Lendo os dados...\")\n",
        "\n",
        "    # Converte os dados da planilha para o formato DataFrame do pandas\n",
        "    dados = pd.DataFrame(worksheet.get_all_records())\n",
        "\n",
        "    # Exibe as 5 primeiras linhas para verificação\n",
        "    print(\"\\n--- Amostra dos dados originais ---\")\n",
        "    print(dados.head())\n",
        "\n",
        "    # Passo 3: Corrigir os valores na coluna 'Sexo'\n",
        "    # Vamos assumir que a coluna se chama 'Sexo'\n",
        "    coluna_para_corrigir = 'Sexo'\n",
        "\n",
        "    if coluna_para_corrigir in dados.columns:\n",
        "        print(f\"\\nCorrigindo 'Femenino' para 'Feminino' na coluna '{coluna_para_corrigir}'...\")\n",
        "\n",
        "        # Conta quantos valores serão corrigidos\n",
        "        contagem_erros = dados[coluna_para_corrigir].value_counts().get('Femenino', 0)\n",
        "\n",
        "        if contagem_erros > 0:\n",
        "            # A linha de código que faz a substituição\n",
        "            dados[coluna_para_corrigir] = dados[coluna_para_corrigir].str.replace('Femenino', 'Feminino', case=False)\n",
        "            print(f\"✅ Correção aplicada! {contagem_erros} ocorrências de 'Femenino' foram corrigidas.\")\n",
        "\n",
        "            # Exibe as 5 primeiras linhas dos dados corrigidos\n",
        "            print(\"\\n--- Amostra dos dados corrigidos ---\")\n",
        "            print(dados.head())\n",
        "\n",
        "            # Passo 4 (Opcional): Salvar as correções em uma NOVA aba na mesma planilha\n",
        "            print(\"\\nSalvando os dados corrigidos em uma nova aba chamada 'dados_corrigidos'...\")\n",
        "\n",
        "            # Cria uma nova aba e envia os dados corrigidos para ela\n",
        "            worksheet_corrigida = spreadsheet.add_worksheet(title=\"dados_corrigidos\", rows=\"1000\", cols=\"20\")\n",
        "            worksheet_corrigida.update([dados.columns.values.tolist()] + dados.values.tolist())\n",
        "\n",
        "            print(\"\\n🎉 Sucesso! Seus dados foram corrigidos e salvos na sua planilha original.\")\n",
        "\n",
        "        else:\n",
        "            print(\"\\nNenhum erro 'Femenino' encontrado para corrigir.\")\n",
        "    else:\n",
        "        print(f\"\\n❌ Erro: A coluna '{coluna_para_corrigir}' não foi encontrada na planilha.\")\n",
        "        print(f\"Colunas disponíveis: {dados.columns.tolist()}\")\n",
        "\n",
        "\n",
        "except gspread.exceptions.SpreadsheetNotFound:\n",
        "    print(f\"\\n❌ ERRO: Planilha com o nome '{nome_da_planilha}' não encontrada no seu Google Drive.\")\n",
        "    print(\"Verifique se o nome está correto e se o arquivo existe.\")\n",
        "except Exception as e:\n",
        "    print(f\"\\n❌ Ocorreu um erro inesperado: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "58MfXZfUfFre",
        "outputId": "aa41718b-47f4-4468-8fa1-46b2654c1974"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Permita o acesso à sua conta Google para continuar...\n",
            "\n",
            "✅ Autenticação concluída com sucesso!\n",
            "\n",
            "Procurando a planilha 'dados_concatenados'...\n",
            "\n",
            "❌ ERRO: Planilha com o nome 'dados_concatenados' não encontrada no seu Google Drive.\n",
            "Verifique se o nome está correto e se o arquivo existe.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from google.colab import files\n",
        "\n",
        "# Configurações de visualização para os gráficos\n",
        "sns.set_style(\"whitegrid\")\n",
        "plt.rcParams['figure.figsize'] = (10, 6)\n",
        "plt.rcParams['font.size'] = 12\n",
        "\n",
        "# Passo 1: Fazer o upload do arquivo de dados corrigidos\n",
        "# Ao executar, um botão aparecerá para você selecionar o arquivo.\n",
        "print(\"Por favor, envie o seu arquivo 'dados_concatenados - dados_corrigidos.csv'\")\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Pega o nome do arquivo que foi enviado\n",
        "nome_do_arquivo = list(uploaded.keys())[0]\n",
        "print(f\"\\nArquivo '{nome_do_arquivo}' carregado com sucesso!\")\n",
        "\n",
        "# Carrega o arquivo para o pandas\n",
        "df = pd.read_csv(nome_do_arquivo)\n",
        "\n",
        "print(\"\\n--- INICIANDO ANÁLISE DESCRITIVA ---\")\n",
        "\n",
        "# --- Análise 1: Distribuição por Categoria ---\n",
        "print(\"\\n1. Análise da coluna 'Categoria':\")\n",
        "categoria_counts = df['Categoria'].value_counts()\n",
        "categoria_percent = df['Categoria'].value_counts(normalize=True) * 100\n",
        "print(\"Contagem de participantes por Categoria:\")\n",
        "print(categoria_counts)\n",
        "print(\"\\nPercentual de participantes por Categoria:\")\n",
        "print(categoria_percent.round(2))\n",
        "\n",
        "# Gráfico de Categoria\n",
        "ax = sns.countplot(y=df['Categoria'], order=categoria_counts.index, palette='viridis')\n",
        "ax.set_title('Distribuição de Participantes por Categoria', fontsize=16)\n",
        "ax.set_xlabel('Quantidade de Participantes')\n",
        "ax.set_ylabel('Categoria')\n",
        "# Adiciona os valores nas barras\n",
        "for container in ax.containers:\n",
        "    ax.bar_label(container, fontsize=12)\n",
        "plt.tight_layout()\n",
        "plt.savefig('grafico_categoria.png')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# --- Análise 2: Distribuição por Sexo ---\n",
        "print(\"\\n\\n2. Análise da coluna 'Sexo':\")\n",
        "sexo_counts = df['Sexo'].value_counts()\n",
        "sexo_percent = df['Sexo'].value_counts(normalize=True) * 100\n",
        "print(\"Contagem de participantes por Sexo:\")\n",
        "print(sexo_counts)\n",
        "print(\"\\nPercentual de participantes por Sexo:\")\n",
        "print(sexo_percent.round(2))\n",
        "\n",
        "# Gráfico de Sexo\n",
        "plt.figure() # Inicia uma nova figura para o próximo gráfico\n",
        "ax = sns.countplot(x=df['Sexo'], order=sexo_counts.index, palette='plasma')\n",
        "ax.set_title('Distribuição de Participantes por Sexo', fontsize=16)\n",
        "ax.set_xlabel('Sexo')\n",
        "ax.set_ylabel('Quantidade de Participantes')\n",
        "for container in ax.containers:\n",
        "    ax.bar_label(container, fontsize=12)\n",
        "plt.tight_layout()\n",
        "plt.savefig('grafico_sexo.png')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# --- Análise 3: Distribuição por Representação ---\n",
        "print(\"\\n\\n3. Análise da coluna 'Representação':\")\n",
        "representacao_counts = df['Representação'].value_counts()\n",
        "representacao_percent = df['Representação'].value_counts(normalize=True) * 100\n",
        "print(\"Contagem de participantes por Representação:\")\n",
        "print(representacao_counts)\n",
        "print(\"\\nPercentual de participantes por Representação:\")\n",
        "print(representacao_percent.round(2))\n",
        "\n",
        "# Gráfico de Representação\n",
        "plt.figure()\n",
        "ax = sns.countplot(x=df['Representação'], order=representacao_counts.index, palette='magma')\n",
        "ax.set_title('Distribuição de Participantes por Representação', fontsize=16)\n",
        "ax.set_xlabel('Tipo de Representação')\n",
        "ax.set_ylabel('Quantidade de Participantes')\n",
        "for container in ax.containers:\n",
        "    ax.bar_label(container, fontsize=12)\n",
        "plt.tight_layout()\n",
        "plt.savefig('grafico_representacao.png')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# --- Análise 4: Distribuição por Município ---\n",
        "print(\"\\n\\n4. Análise da coluna 'Município':\")\n",
        "# Pega os 15 municípios com mais participantes\n",
        "municipio_counts = df['Município'].value_counts().nlargest(15)\n",
        "print(\"Contagem dos 15 principais municípios:\")\n",
        "print(municipio_counts)\n",
        "\n",
        "# Gráfico de Município\n",
        "plt.figure(figsize=(12, 8)) # Ajusta o tamanho para caber mais nomes\n",
        "ax = sns.countplot(y=df['Município'], order=municipio_counts.index, palette='cividis')\n",
        "ax.set_title('Top 15 Municípios por Quantidade de Participantes', fontsize=16)\n",
        "ax.set_xlabel('Quantidade de Participantes')\n",
        "ax.set_ylabel('Município')\n",
        "for container in ax.containers:\n",
        "    ax.bar_label(container, fontsize=12)\n",
        "plt.tight_layout()\n",
        "plt.savefig('grafico_municipio.png')\n",
        "plt.show()\n",
        "\n",
        "print(\"\\n--- ANÁLISE CONCLUÍDA ---\")\n",
        "print(\"Os gráficos foram exibidos acima e salvos como arquivos .png no ambiente do Colab.\")\n",
        "print(\"Você pode baixá-los na aba 'Arquivos' à esquerda.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 413
        },
        "id": "gx_SmUPrgVgh",
        "outputId": "23ffaae1-e36d-481a-f38b-05e364221b22"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Por favor, envie o seu arquivo 'dados_concatenados - dados_corrigidos.csv'\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-4fee6fca-5b9a-4e3d-a99c-7819bcef9682\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-4fee6fca-5b9a-4e3d-a99c-7819bcef9682\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-3768711056.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m# Ao executar, um botão aparecerá para você selecionar o arquivo.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Por favor, envie o seu arquivo 'dados_concatenados - dados_corrigidos.csv'\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0muploaded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;31m# Pega o nome do arquivo que foi enviado\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36mupload\u001b[0;34m(target_dir)\u001b[0m\n\u001b[1;32m     70\u001b[0m   \"\"\"\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m   \u001b[0muploaded_files\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_upload_files\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmultiple\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m   \u001b[0;31m# Mapping from original filename to filename as saved locally.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m   \u001b[0mlocal_filenames\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36m_upload_files\u001b[0;34m(multiple)\u001b[0m\n\u001b[1;32m    162\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    163\u001b[0m   \u001b[0;31m# First result is always an indication that the file picker has completed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 164\u001b[0;31m   result = _output.eval_js(\n\u001b[0m\u001b[1;32m    165\u001b[0m       'google.colab._files._uploadFiles(\"{input_id}\", \"{output_id}\")'.format(\n\u001b[1;32m    166\u001b[0m           \u001b[0minput_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moutput_id\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/google/colab/output/_js.py\u001b[0m in \u001b[0;36meval_js\u001b[0;34m(script, ignore_result, timeout_sec)\u001b[0m\n\u001b[1;32m     38\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mignore_result\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0m_message\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m     94\u001b[0m     \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_read_next_input_message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_NOT_READY\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m       \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.025\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m       \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m     if (\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import gspread\n",
        "from google.colab import auth\n",
        "from google.auth import default\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# --- PASSO 1: AUTENTICAÇÃO E CARREGAMENTO DOS DADOS ---\n",
        "print(\"Autenticando sua conta Google para acessar a planilha...\")\n",
        "auth.authenticate_user()\n",
        "creds, _ = default()\n",
        "gc = gspread.authorize(creds)\n",
        "print(\"✅ Autenticação concluída!\")\n",
        "\n",
        "# Abre a planilha pelo nome e carrega a aba 'dados_corrigidos'\n",
        "try:\n",
        "    nome_da_planilha = 'dados_concatenados'\n",
        "    spreadsheet = gc.open(nome_da_planilha)\n",
        "    worksheet = spreadsheet.worksheet('dados_corrigidos') # Pega os dados da aba que já corrigimos\n",
        "    print(f\"✅ Planilha '{nome_da_planilha}' e aba 'dados_corrigidos' encontradas.\")\n",
        "\n",
        "    df = pd.DataFrame(worksheet.get_all_records())\n",
        "    print(\"Dados carregados com sucesso!\")\n",
        "\n",
        "    # --- PASSO 2: LIMPEZA DA COLUNA 'REPRESENTAÇÃO' ---\n",
        "    print(\"\\n--- Limpando a coluna 'Representação' ---\")\n",
        "    # Substitui as diferentes grafias por um termo único\n",
        "    df['Representação'] = df['Representação'].replace(['Sem ID', 'Sem Id'], 'Não Identificado')\n",
        "    print(\"Valores 'Sem ID' e 'Sem Id' foram unificados para 'Não Identificado'.\")\n",
        "\n",
        "    # Mostra a nova contagem\n",
        "    print(\"\\nNova contagem por Representação:\")\n",
        "    print(df['Representação'].value_counts())\n",
        "\n",
        "\n",
        "    # --- PASSO 3: ANÁLISE GEOGRÁFICA POR TERRITÓRIO ---\n",
        "    print(\"\\n--- Mapeando municípios para seus respectivos territórios ---\")\n",
        "\n",
        "    # Dicionário com a relação Município -> Território no RN\n",
        "    # Fonte: Pesquisa em portais governamentais sobre as divisões territoriais do RN\n",
        "    territorios_rn = {\n",
        "        # Mato Grande\n",
        "        'João Câmara': 'Mato Grande', 'Bento Fernandes': 'Mato Grande', 'Caiçara do Norte': 'Mato Grande',\n",
        "        'Galinhos': 'Mato Grande', 'Jandaíra': 'Mato Grande', 'Jardim de Angicos': 'Mato Grande',\n",
        "        'Parazinho': 'Mato Grande', 'Pedra Grande': 'Mato Grande', 'Pedro Avelino': 'Mato Grande',\n",
        "        'Poço Branco': 'Mato Grande', 'São Bento do Norte': 'Mato Grande', 'Taipu': 'Mato Grande',\n",
        "        'Pureza': 'Mato Grande', 'Rio do Fogo': 'Mato Grande', 'São Miguel do Gostoso': 'Mato Grande',\n",
        "        'Touros': 'Mato Grande', 'Maxaranguape': 'Mato Grande', 'Ceará-Mirim': 'Mato Grande',\n",
        "        # Terras Potiguaras\n",
        "        'Baía Formosa': 'Terras Potiguaras', 'Canguaretama': 'Terras Potiguaras', 'Goianinha': 'Terras Potiguaras',\n",
        "        'Pedro Velho': 'Terras Potiguaras', 'Tibau do Sul': 'Terras Potiguaras', 'Vila Flor': 'Terras Potiguaras',\n",
        "        'Montanhas': 'Terras Potiguaras', 'Espirito Santo': 'Terras Potiguaras', 'Várzea': 'Terras Potiguaras',\n",
        "        'Santo Antônio': 'Terras Potiguaras', 'Passagem': 'Terras Potiguaras', 'Jundiá': 'Terras Potiguaras',\n",
        "        'Nova Cruz': 'Terras Potiguaras',\n",
        "        # Potengi\n",
        "        'Barcelona': 'Potengi', 'Bom Jesus': 'Potengi', 'Lagoa de Velhos': 'Potengi', 'Riachuelo': 'Potengi',\n",
        "        'Ruy Barbosa': 'Potengi', 'Santa Maria': 'Potengi', 'São Paulo do Potengi': 'Potengi', 'São Tomé': 'Potengi',\n",
        "        'Senador Elói de Souza': 'Potengi', 'Serra Caiada': 'Potengi', 'Sítio Novo': 'Potengi',\n",
        "        # Sertão do Apodi\n",
        "        'Apodi': 'Sertão do Apodi', 'Caraúbas': 'Sertão do Apodi', 'Felipe Guerra': 'Sertão do Apodi',\n",
        "        'Governador Dix-Sept Rosado': 'Sertão do Apodi', 'Itaú': 'Sertão do Apodi', 'Rodolfo Fernandes': 'Sertão do Apodi',\n",
        "        'Severiano Melo': 'Sertão do Apodi', 'Upanema': 'Sertão do Apodi',\n",
        "        # Assu/Mossoró\n",
        "        'Açu': 'Assu/Mossoró', 'Assu': 'Assu/Mossoró', 'Alto do Rodrigues': 'Assu/Mossoró', 'Areia Branca': 'Assu/Mossoró',\n",
        "        'Baraúna': 'Assu/Mossoró', 'Carnaubais': 'Assu/Mossoró', 'Grossos': 'Assu/Mossoró',\n",
        "        'Ipanguaçu': 'Assu/Mossoró', 'Itajá': 'Assu/Mossoró', 'Mossoró': 'Assu/Mossoró',\n",
        "        'Pendências': 'Assu/Mossoró', 'Porto do Mangue': 'Assu/Mossoró', 'Serra do Mel': 'Assu/Mossoró',\n",
        "        'Tibau': 'Assu/Mossoró',\n",
        "        # Seridó\n",
        "        'Acari': 'Seridó', 'Bodó': 'Seridó', 'Caicó': 'Seridó', 'Carnaúba dos Dantas': 'Seridó',\n",
        "        'Cruzeta': 'Seridó', 'Currais Novos': 'Seridó', 'Equador': 'Seridó', 'Florânia': 'Seridó',\n",
        "        'Ipueira': 'Seridó', 'Jardim de Piranhas': 'Seridó', 'Jardim do Seridó': 'Seridó',\n",
        "        'Jucurutu': 'Seridó', 'Lagoa Nova': 'Seridó', 'Ouro Branco': 'Seridó', 'Parelhas': 'Seridó',\n",
        "        'Santana do Matos': 'Seridó', 'Santana do Seridó': 'Seridó', 'São Fernando': 'Seridó',\n",
        "        'São João do Sabugi': 'Seridó', 'São José do Seridó': 'Seridó', 'São Vicente': 'Seridó',\n",
        "        'Serra Negra do Norte': 'Seridó', 'Timbaúba dos Batistas': 'Seridó',\n",
        "        # Alto Oeste\n",
        "        'Água Nova': 'Alto Oeste', 'Alexandria': 'Alto Oeste', 'Almino Afonso': 'Alto Oeste',\n",
        "        'Antônio Martins': 'Alto Oeste', 'Coronel João Pessoa': 'Alto Oeste', 'Doutor Severiano': 'Alto Oeste',\n",
        "        'Encanto': 'Alto Oeste', 'Francisco Dantas': 'Alto Oeste', 'Itaú': 'Alto Oeste', 'João Dias': 'Alto Oeste',\n",
        "        'José da Penha': 'Alto Oeste', 'Luís Gomes': 'Alto Oeste', 'Major Sales': 'Alto Oeste',\n",
        "        'Marcelino Vieira': 'Alto Oeste', 'Martins': 'Alto Oeste', 'Paraná': 'Alto Oeste',\n",
        "        'Pau dos Ferros': 'Alto Oeste', 'Pilões': 'Alto Oeste', 'Portalegre': 'Alto Oeste',\n",
        "        'Riacho da Cruz': 'Alto Oeste', 'Riacho de Santana': 'Alto Oeste', 'São Francisco do Oeste': 'Alto Oeste',\n",
        "        'São Miguel': 'Alto Oeste', 'Serrinha dos Pintos': 'Alto Oeste', 'Tenente Ananias': 'Alto Oeste',\n",
        "        'Umarizal': 'Alto Oeste', 'Viçosa': 'Alto Oeste', 'Olho-d\\'água do Borges': 'Alto Oeste',\n",
        "        # Sertão Central/Cabugi/Litoral Norte\n",
        "        'Afonso Bezerra': 'Sertão Central/Cabugi', 'Angicos': 'Sertão Central/Cabugi',\n",
        "        'Bodó': 'Sertão Central/Cabugi', 'Fernando Pedroza': 'Sertão Central/Cabugi',\n",
        "        'Lajes': 'Sertão Central/Cabugi', 'Lajes Pintadas': 'Sertão Central/Cabugi', 'Pedra Preta': 'Sertão Central/Cabugi',\n",
        "        'Pedro Avelino': 'Sertão Central/Cabugi', 'Santana do Matos': 'Sertão Central/Cabugi', 'São Pedro': 'Sertão Central/Cabugi',\n",
        "        'Serrinha': 'Sertão Central/Cabugi',\n",
        "        # Agreste/Litoral Sul (Incluindo Natal e Grande Natal)\n",
        "        'Natal': 'Agreste/Litoral Sul', 'Parnamirim': 'Agreste/Litoral Sul', 'Macaíba': 'Agreste/Litoral Sul',\n",
        "        'São Gonçalo do Amarante': 'Agreste/Litoral Sul', 'Extremoz': 'Agreste/Litoral Sul', 'Nísia Floresta': 'Agreste/Litoral Sul',\n",
        "        'São José de Mipibu': 'Agreste/Litoral Sul',\n",
        "    }\n",
        "\n",
        "    # Cria uma nova coluna 'Territorio' baseada no mapeamento\n",
        "    df['Territorio'] = df['Município'].map(territorios_rn).fillna('Não Identificado')\n",
        "    print(\"Nova coluna 'Territorio' criada.\")\n",
        "\n",
        "    # Análise da nova coluna Territorio\n",
        "    territorio_counts = df['Territorio'].value_counts()\n",
        "    print(\"\\nContagem de participantes por Território:\")\n",
        "    print(territorio_counts)\n",
        "\n",
        "    # Gráfico de Território\n",
        "    plt.figure(figsize=(12, 8))\n",
        "    ax = sns.countplot(y=df['Territorio'], order=territorio_counts.index, palette='terrain')\n",
        "    ax.set_title('Distribuição de Participantes por Território', fontsize=16)\n",
        "    ax.set_xlabel('Quantidade de Participantes')\n",
        "    ax.set_ylabel('Território')\n",
        "    for container in ax.containers:\n",
        "        ax.bar_label(container, fontsize=12)\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('grafico_territorio.png')\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "    # --- PASSO 4: SALVAR OS DADOS ENRIQUECIDOS EM UMA NOVA ABA ---\n",
        "    print(\"\\n--- Salvando os dados na planilha ---\")\n",
        "    nova_aba = 'analise_territorial'\n",
        "    print(f\"Criando uma nova aba chamada '{nova_aba}' com os dados limpos e a coluna de território...\")\n",
        "\n",
        "    # Adiciona a nova aba e envia os dados do DataFrame para ela\n",
        "    worksheet_nova = spreadsheet.add_worksheet(title=nova_aba, rows=df.shape[0]+1, cols=df.shape[1]+1)\n",
        "    worksheet_nova.update([df.columns.values.tolist()] + df.values.tolist())\n",
        "\n",
        "    print(f\"\\n🎉 SUCESSO! Uma nova aba '{nova_aba}' foi adicionada à sua planilha com todos os dados atualizados.\")\n",
        "\n",
        "except gspread.exceptions.WorksheetNotFound:\n",
        "    print(f\"❌ ERRO: A aba 'dados_corrigidos' não foi encontrada. Certifique-se de que ela existe na planilha '{nome_da_planilha}'.\")\n",
        "except Exception as e:\n",
        "    print(f\"❌ Ocorreu um erro inesperado: {e}\")"
      ],
      "metadata": {
        "id": "QvPd3nRgjO7N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import gspread\n",
        "from google.colab import auth, files\n",
        "from google.auth import default\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import time\n",
        "\n",
        "# --- TENTATIVA 1: CONECTAR À PLANILHA GOOGLE (MÉTODO PREFERENCIAL) ---\n",
        "df = None\n",
        "try:\n",
        "    print(\"--- Tentando conectar à sua Planilha Google (Tentativa 1/2) ---\")\n",
        "    auth.authenticate_user()\n",
        "    creds, _ = default()\n",
        "    gc = gspread.authorize(creds)\n",
        "\n",
        "    nome_da_planilha = 'dados_concatenados'\n",
        "    spreadsheet = gc.open(nome_da_planilha)\n",
        "    worksheet = spreadsheet.worksheet('analise_territorial')\n",
        "\n",
        "    df = pd.DataFrame(worksheet.get_all_records())\n",
        "    print(\"✅ Conexão bem-sucedida! Dados carregados da aba 'analise_territorial'.\\n\")\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"⚠️ A primeira tentativa falhou. Aguardando 5 segundos e tentando novamente... (Erro: {e})\")\n",
        "    time.sleep(5) # Pausa para aguardar a API estabilizar\n",
        "    try:\n",
        "        print(\"\\n--- Tentando conectar à sua Planilha Google (Tentativa 2/2) ---\")\n",
        "        # Reautentica para garantir um token novo\n",
        "        auth.authenticate_user()\n",
        "        creds, _ = default()\n",
        "        gc = gspread.authorize(creds)\n",
        "        spreadsheet = gc.open(nome_da_planilha)\n",
        "        worksheet = spreadsheet.worksheet('analise_territorial')\n",
        "        df = pd.DataFrame(worksheet.get_all_records())\n",
        "        print(\"✅ Conexão bem-sucedida na segunda tentativa!\\n\")\n",
        "    except Exception as e_final:\n",
        "        print(f\"❌ A conexão com o Google Sheets falhou novamente. (Erro: {e_final})\")\n",
        "        print(\"Iniciando o PLANO B: Upload de arquivo local.\\n\")\n",
        "\n",
        "# --- PLANO B: UPLOAD DE ARQUIVO LOCAL (CASO A CONEXÃO FALHE) ---\n",
        "if df is None:\n",
        "    print(\"Por favor, envie o arquivo 'dados_concatenados - dados_corrigidos.csv' que você já tem.\")\n",
        "    uploaded = files.upload()\n",
        "    nome_do_arquivo = list(uploaded.keys())[0]\n",
        "    df = pd.read_csv(nome_do_arquivo)\n",
        "\n",
        "    # Recria a coluna 'Territorio' caso ela não exista no arquivo (melhoria de robustez)\n",
        "    if 'Territorio' not in df.columns:\n",
        "        # (O mesmo dicionário da etapa anterior)\n",
        "        territorios_rn = { 'João Câmara': 'Mato Grande', 'Bento Fernandes': 'Mato Grande', 'Caiçara do Norte': 'Mato Grande', 'Galinhos': 'Mato Grande', 'Jandaíra': 'Mato Grande', 'Jardim de Angicos': 'Mato Grande', 'Parazinho': 'Mato Grande', 'Pedra Grande': 'Mato Grande', 'Pedro Avelino': 'Mato Grande', 'Poço Branco': 'Mato Grande', 'São Bento do Norte': 'Mato Grande', 'Taipu': 'Mato Grande', 'Pureza': 'Mato Grande', 'Rio do Fogo': 'Mato Grande', 'São Miguel do Gostoso': 'Mato Grande', 'Touros': 'Mato Grande', 'Maxaranguape': 'Mato Grande', 'Ceará-Mirim': 'Mato Grande', 'Baía Formosa': 'Terras Potiguaras', 'Canguaretama': 'Terras Potiguaras', 'Goianinha': 'Terras Potiguaras', 'Pedro Velho': 'Terras Potiguaras', 'Tibau do Sul': 'Terras Potiguaras', 'Vila Flor': 'Terras Potiguaras', 'Montanhas': 'Terras Potiguaras', 'Espirito Santo': 'Terras Potiguaras', 'Várzea': 'Terras Potiguaras', 'Santo Antônio': 'Terras Potiguaras', 'Passagem': 'Terras Potiguaras', 'Jundiá': 'Terras Potiguaras', 'Nova Cruz': 'Terras Potiguaras', 'Barcelona': 'Potengi', 'Bom Jesus': 'Potengi', 'Lagoa de Velhos': 'Potengi', 'Riachuelo': 'Potengi', 'Ruy Barbosa': 'Potengi', 'Santa Maria': 'Potengi', 'São Paulo do Potengi': 'Potengi', 'São Tomé': 'Potengi', 'Senador Elói de Souza': 'Potengi', 'Serra Caiada': 'Potengi', 'Sítio Novo': 'Potengi', 'Apodi': 'Sertão do Apodi', 'Caraúbas': 'Sertão do Apodi', 'Felipe Guerra': 'Sertão do Apodi', 'Governador Dix-Sept Rosado': 'Sertão do Apodi', 'Itaú': 'Sertão do Apodi', 'Rodolfo Fernandes': 'Sertão do Apodi', 'Severiano Melo': 'Sertão do Apodi', 'Upanema': 'Sertão do Apodi', 'Açu': 'Assu/Mossoró', 'Assu': 'Assu/Mossoró', 'Alto do Rodrigues': 'Assu/Mossoró', 'Areia Branca': 'Assu/Mossoró', 'Baraúna': 'Assu/Mossoró', 'Carnaubais': 'Assu/Mossoró', 'Grossos': 'Assu/Mossoró', 'Ipanguaçu': 'Assu/Mossoró', 'Itajá': 'Assu/Mossoró', 'Mossoró': 'Assu/Mossoró', 'Pendências': 'Assu/Mossoró', 'Porto do Mangue': 'Assu/Mossoró', 'Serra do Mel': 'Assu/Mossoró', 'Tibau': 'Assu/Mossoró', 'Acari': 'Seridó', 'Bodó': 'Seridó', 'Caicó': 'Seridó', 'Carnaúba dos Dantas': 'Seridó', 'Cruzeta': 'Seridó', 'Currais Novos': 'Seridó', 'Equador': 'Seridó', 'Florânia': 'Seridó', 'Ipueira': 'Seridó', 'Jardim de Piranhas': 'Seridó', 'Jardim do Seridó': 'Seridó', 'Jucurutu': 'Seridó', 'Lagoa Nova': 'Seridó', 'Ouro Branco': 'Seridó', 'Parelhas': 'Seridó', 'Santana do Matos': 'Seridó', 'Santana do Seridó': 'Seridó', 'São Fernando': 'Seridó', 'São João do Sabugi': 'Seridó', 'São José do Seridó': 'Seridó', 'São Vicente': 'Seridó', 'Serra Negra do Norte': 'Seridó', 'Timbaúba dos Batistas': 'Seridó', 'Água Nova': 'Alto Oeste', 'Alexandria': 'Alto Oeste', 'Almino Afonso': 'Alto Oeste', 'Antônio Martins': 'Alto Oeste', 'Coronel João Pessoa': 'Alto Oeste', 'Doutor Severiano': 'Alto Oeste', 'Encanto': 'Alto Oeste', 'Francisco Dantas': 'Alto Oeste', 'João Dias': 'Alto Oeste', 'José da Penha': 'Alto Oeste', 'Luís Gomes': 'Alto Oeste', 'Major Sales': 'Alto Oeste', 'Marcelino Vieira': 'Alto Oeste', 'Martins': 'Alto Oeste', 'Paraná': 'Alto Oeste', 'Pau dos Ferros': 'Alto Oeste', 'Pilões': 'Alto Oeste', 'Portalegre': 'Alto Oeste', 'Riacho da Cruz': 'Alto Oeste', 'Riacho de Santana': 'Alto Oeste', 'São Francisco do Oeste': 'Alto Oeste', 'São Miguel': 'Alto Oeste', 'Serrinha dos Pintos': 'Alto Oeste', 'Tenente Ananias': 'Alto Oeste', 'Umarizal': 'Alto Oeste', 'Viçosa': 'Alto Oeste', 'Olho-d\\'água do Borges': 'Alto Oeste', 'Afonso Bezerra': 'Sertão Central/Cabugi', 'Angicos': 'Sertão Central/Cabugi', 'Fernando Pedroza': 'Sertão Central/Cabugi', 'Lajes': 'Sertão Central/Cabugi', 'Lajes Pintadas': 'Sertão Central/Cabugi', 'Pedra Preta': 'Sertão Central/Cabugi', 'Pedro Avelino': 'Sertão Central/Cabugi', 'São Pedro': 'Sertão Central/Cabugi', 'Serrinha': 'Sertão Central/Cabugi', 'Natal': 'Agreste/Litoral Sul', 'Parnamirim': 'Agreste/Litoral Sul', 'Macaíba': 'Agreste/Litoral Sul', 'São Gonçalo do Amarante': 'Agreste/Litoral Sul', 'Extremoz': 'Agreste/Litoral Sul', 'Nísia Floresta': 'Agreste/Litoral Sul', 'São José de Mipibu': 'Agreste/Litoral Sul' }\n",
        "        df['Territorio'] = df['Município'].map(territorios_rn).fillna('Não Identificado')\n",
        "        df['Representação'] = df['Representação'].replace(['Sem ID', 'Sem Id'], 'Não Identificado')\n",
        "\n",
        "# --- ANÁLISE DE IMPUTAÇÃO (CÓDIGO PRINCIPAL) ---\n",
        "if df is not None:\n",
        "    print(\"\\n--- Iniciando a análise de imputação para 'Território' ---\")\n",
        "    contagem_original = df['Territorio'].value_counts()\n",
        "    print(\"\\nContagem Original:\")\n",
        "    print(contagem_original)\n",
        "\n",
        "    nao_identificados_total = contagem_original.get('Não Identificado', 0)\n",
        "    contagem_identificados = contagem_original.drop('Não Identificado', errors='ignore')\n",
        "\n",
        "    print(f\"\\nTotal de participantes com território identificado: {contagem_identificados.sum()}\")\n",
        "    print(f\"Total de participantes com território 'Não Identificado': {nao_identificados_total}\")\n",
        "\n",
        "    proporcao_identificados = contagem_identificados / contagem_identificados.sum()\n",
        "    print(\"\\nProporção de cada Território (baseado nos dados conhecidos):\")\n",
        "    print((proporcao_identificados * 100).round(2).astype(str) + '%')\n",
        "\n",
        "    imputacao = (proporcao_identificados * nao_identificados_total).round(0)\n",
        "    print(\"\\nValores imputados (distribuição dos não identificados):\")\n",
        "    print(imputacao)\n",
        "\n",
        "    contagem_estimada_final = contagem_identificados + imputacao\n",
        "    contagem_estimada_final = contagem_estimada_final.sort_values(ascending=False)\n",
        "\n",
        "    print(\"\\n--- RESULTADO FINAL: Contagem Estimada por Território ---\")\n",
        "    print(contagem_estimada_final.astype(int))\n",
        "\n",
        "    print(\"\\nGerando novo gráfico com a distribuição estimada...\")\n",
        "    plt.figure(figsize=(12, 8))\n",
        "    ax = sns.barplot(x=contagem_estimada_final.values, y=contagem_estimada_final.index, palette='ocean')\n",
        "    ax.set_title('Distribuição Estimada de Participantes por Território', fontsize=16, weight='bold')\n",
        "    ax.set_xlabel('Quantidade Estimada de Participantes', fontsize=12)\n",
        "    ax.set_ylabel('Território', fontsize=12)\n",
        "\n",
        "    for i, v in enumerate(contagem_estimada_final.values):\n",
        "        ax.text(v + 1, i, str(int(v)), color='black', va='center', fontweight='medium')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('grafico_territorio_estimado.png')\n",
        "    plt.show()\n",
        "\n",
        "    print(\"\\n🎉 Análise de imputação concluída!\")\n",
        "else:\n",
        "    print(\"\\n❌ Não foi possível carregar os dados. A análise não pôde ser concluída.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "S-Dqws1RnE4K",
        "outputId": "e5bdcfd1-0e18-4d4c-ed9e-25789a0b906b"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Tentando conectar à sua Planilha Google (Tentativa 1/2) ---\n",
            "⚠️ A primeira tentativa falhou. Aguardando 5 segundos e tentando novamente... (Erro: <Response [200]>)\n",
            "\n",
            "--- Tentando conectar à sua Planilha Google (Tentativa 2/2) ---\n",
            "❌ A conexão com o Google Sheets falhou novamente. (Erro: <Response [200]>)\n",
            "Iniciando o PLANO B: Upload de arquivo local.\n",
            "\n",
            "Por favor, envie o arquivo 'dados_concatenados - dados_corrigidos.csv' que você já tem.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-b66f40df-d48a-4a78-93a8-d5363e5033c7\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-b66f40df-d48a-4a78-93a8-d5363e5033c7\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving dados_coedipi - analise_territorial.csv to dados_coedipi - analise_territorial (3).csv\n",
            "\n",
            "--- Iniciando a análise de imputação para 'Território' ---\n",
            "\n",
            "Contagem Original:\n",
            "Territorio\n",
            "Não Identificado         136\n",
            "Agreste/Litoral Sul       51\n",
            "Seridó                    24\n",
            "Assu/Mossoró              23\n",
            "Terras Potiguaras         10\n",
            "Potengi                    9\n",
            "Sertão Central/Cabugi      9\n",
            "Sertão do Apodi            5\n",
            "Mato Grande                5\n",
            "Alto Oeste                 3\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Total de participantes com território identificado: 139\n",
            "Total de participantes com território 'Não Identificado': 136\n",
            "\n",
            "Proporção de cada Território (baseado nos dados conhecidos):\n",
            "Territorio\n",
            "Agreste/Litoral Sul      36.69%\n",
            "Seridó                   17.27%\n",
            "Assu/Mossoró             16.55%\n",
            "Terras Potiguaras         7.19%\n",
            "Potengi                   6.47%\n",
            "Sertão Central/Cabugi     6.47%\n",
            "Sertão do Apodi            3.6%\n",
            "Mato Grande                3.6%\n",
            "Alto Oeste                2.16%\n",
            "Name: count, dtype: object\n",
            "\n",
            "Valores imputados (distribuição dos não identificados):\n",
            "Territorio\n",
            "Agreste/Litoral Sul      50.0\n",
            "Seridó                   23.0\n",
            "Assu/Mossoró             23.0\n",
            "Terras Potiguaras        10.0\n",
            "Potengi                   9.0\n",
            "Sertão Central/Cabugi     9.0\n",
            "Sertão do Apodi           5.0\n",
            "Mato Grande               5.0\n",
            "Alto Oeste                3.0\n",
            "Name: count, dtype: float64\n",
            "\n",
            "--- RESULTADO FINAL: Contagem Estimada por Território ---\n",
            "Territorio\n",
            "Agreste/Litoral Sul      101\n",
            "Seridó                    47\n",
            "Assu/Mossoró              46\n",
            "Terras Potiguaras         20\n",
            "Potengi                   18\n",
            "Sertão Central/Cabugi     18\n",
            "Sertão do Apodi           10\n",
            "Mato Grande               10\n",
            "Alto Oeste                 6\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Gerando novo gráfico com a distribuição estimada...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-3197020050.py:84: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  ax = sns.barplot(x=contagem_estimada_final.values, y=contagem_estimada_final.index, palette='ocean')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🎉 Análise de imputação concluída!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import gspread\n",
        "from google.colab import auth, files\n",
        "from google.auth import default\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import time\n",
        "\n",
        "# --- PASSO 1: CARREGAR OS DADOS DA ÚLTIMA ANÁLISE ---\n",
        "df = None\n",
        "try:\n",
        "    print(\"--- Conectando à Planilha Google para carregar a aba 'analise_territorial' ---\")\n",
        "    auth.authenticate_user()\n",
        "    creds, _ = default()\n",
        "    gc = gspread.authorize(creds)\n",
        "    spreadsheet = gc.open('dados_concatenados')\n",
        "    worksheet = spreadsheet.worksheet('analise_territorial')\n",
        "    df = pd.DataFrame(worksheet.get_all_records())\n",
        "    print(\"✅ Dados carregados com sucesso da sua planilha!\\n\")\n",
        "except Exception as e:\n",
        "    print(f\"⚠️ Não foi possível conectar à planilha (Erro: {e}).\")\n",
        "    print(\"Iniciando o PLANO B: Por favor, envie o último arquivo CSV gerado ('dados_coedipi - analise_territorial.csv').\\n\")\n",
        "    uploaded = files.upload()\n",
        "    nome_do_arquivo = list(uploaded.keys())[0]\n",
        "    df = pd.read_csv(nome_do_arquivo)\n",
        "\n",
        "# --- PASSO 2: CRIAR A TABELA DE CONTINGÊNCIA (CRUZAMENTO DE DADOS) ---\n",
        "# Vamos focar apenas nos dois principais grupos de representação para uma comparação clara\n",
        "df_filtrado = df[df['Representação'].isin(['Poder Público', 'Sociedade Civil'])]\n",
        "territorios_estimados_ordem = ['Agreste/Litoral Sul', 'Seridó', 'Assu/Mossoró', 'Terras Potiguaras', 'Potengi', 'Sertão Central/Cabugi', 'Sertão do Apodi', 'Mato Grande', 'Alto Oeste']\n",
        "df_filtrado = df_filtrado[df_filtrado['Territorio'].isin(territorios_estimados_ordem)]\n",
        "\n",
        "\n",
        "print(\"--- Criando Tabela de Contingência: Território vs. Representação ---\")\n",
        "# pd.crosstab é a função que cria a tabela de contingência\n",
        "tabela_contingencia = pd.crosstab(df_filtrado['Territorio'], df_filtrado['Representação'])\n",
        "\n",
        "# Reordena a tabela para seguir a ordem do gráfico anterior (do maior para o menor)\n",
        "tabela_contingencia = tabela_contingencia.reindex(territorios_estimados_ordem)\n",
        "\n",
        "print(\"\\nTabela de Contagem Absoluta:\")\n",
        "print(tabela_contingencia)\n",
        "\n",
        "# Calcula a proporção (percentual) para cada território\n",
        "tabela_percentual = tabela_contingencia.div(tabela_contingencia.sum(axis=1), axis=0)\n",
        "print(\"\\nTabela de Proporção Percentual:\")\n",
        "print((tabela_percentual * 100).round(2))\n",
        "\n",
        "\n",
        "# --- PASSO 3: PLOTAR O GRÁFICO DE BARRAS EMPILHADAS PERCENTUAL ---\n",
        "print(\"\\n--- Gerando o Gráfico de Análise Cruzada ---\")\n",
        "fig, ax = plt.subplots(figsize=(14, 8))\n",
        "\n",
        "# O método plot com kind='barh' e stacked=True cria o gráfico de barras empilhadas na horizontal\n",
        "tabela_percentual.plot(kind='barh', stacked=True, ax=ax, colormap='viridis', width=0.8)\n",
        "\n",
        "ax.set_title('Proporção de Representação (Poder Público vs. Sociedade Civil) por Território', fontsize=16, weight='bold')\n",
        "ax.set_xlabel('Percentual de Participantes (%)', fontsize=12)\n",
        "ax.set_ylabel('Território', fontsize=12)\n",
        "ax.legend(title='Representação', bbox_to_anchor=(1.02, 1), loc='upper left')\n",
        "ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{x:.0%}')) # Formata o eixo X como porcentagem\n",
        "\n",
        "# Adiciona os rótulos de porcentagem dentro de cada segmento da barra\n",
        "for container in ax.containers:\n",
        "    # A formatação aqui é um pouco mais complexa para centralizar o texto\n",
        "    ax.bar_label(container, labels=[f'{v:.1%}' if v > 0 else '' for v in container.datavalues], label_type='center', color='white', weight='bold', fontsize=10)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig('grafico_cruzamento_territorio_representacao.png')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "CzI2m4p2oNR_",
        "outputId": "0a457932-46c9-411a-af26-8d1c1924d5d4"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Conectando à Planilha Google para carregar a aba 'analise_territorial' ---\n",
            "⚠️ Não foi possível conectar à planilha (Erro: <Response [200]>).\n",
            "Iniciando o PLANO B: Por favor, envie o último arquivo CSV gerado ('dados_coedipi - analise_territorial.csv').\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-5f84d254-bb49-4a0b-ab61-36e7058953c3\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-5f84d254-bb49-4a0b-ab61-36e7058953c3\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving dados_coedipi - analise_territorial.csv to dados_coedipi - analise_territorial (4).csv\n",
            "--- Criando Tabela de Contingência: Território vs. Representação ---\n",
            "\n",
            "Tabela de Contagem Absoluta:\n",
            "Representação          Poder Público  Sociedade Civil\n",
            "Territorio                                           \n",
            "Agreste/Litoral Sul               21               29\n",
            "Seridó                             9               15\n",
            "Assu/Mossoró                      10               13\n",
            "Terras Potiguaras                  4                6\n",
            "Potengi                            4                5\n",
            "Sertão Central/Cabugi              1                8\n",
            "Sertão do Apodi                    2                3\n",
            "Mato Grande                        4                1\n",
            "Alto Oeste                         0                3\n",
            "\n",
            "Tabela de Proporção Percentual:\n",
            "Representação          Poder Público  Sociedade Civil\n",
            "Territorio                                           \n",
            "Agreste/Litoral Sul            42.00            58.00\n",
            "Seridó                         37.50            62.50\n",
            "Assu/Mossoró                   43.48            56.52\n",
            "Terras Potiguaras              40.00            60.00\n",
            "Potengi                        44.44            55.56\n",
            "Sertão Central/Cabugi          11.11            88.89\n",
            "Sertão do Apodi                40.00            60.00\n",
            "Mato Grande                    80.00            20.00\n",
            "Alto Oeste                      0.00           100.00\n",
            "\n",
            "--- Gerando o Gráfico de Análise Cruzada ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import gspread\n",
        "from google.colab import auth, files\n",
        "from google.auth import default\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# --- PASSO 1: CARREGAR OS DADOS ---\n",
        "df = None\n",
        "try:\n",
        "    print(\"--- Conectando à Planilha Google para carregar a aba 'analise_territorial' ---\")\n",
        "    auth.authenticate_user()\n",
        "    creds, _ = default()\n",
        "    gc = gspread.authorize(creds)\n",
        "    spreadsheet = gc.open('dados_concatenados')\n",
        "    worksheet = spreadsheet.worksheet('analise_territorial')\n",
        "    df = pd.DataFrame(worksheet.get_all_records())\n",
        "    print(\"✅ Dados carregados com sucesso da sua planilha!\\n\")\n",
        "except Exception as e:\n",
        "    print(f\"⚠️ Não foi possível conectar à planilha. Iniciando o PLANO B.\")\n",
        "    print(\"Por favor, envie o arquivo 'dados_coedipi - analise_territorial.csv'.\\n\")\n",
        "    uploaded = files.upload()\n",
        "    nome_do_arquivo = list(uploaded.keys())[0]\n",
        "    df = pd.read_csv(nome_do_arquivo)\n",
        "\n",
        "# --- PASSO 2: ANÁLISE CRUZADA: REPRESENTAÇÃO VS. CATEGORIA ---\n",
        "print(\"\\n--- Criando Tabela de Contingência: Representação vs. Categoria ---\")\n",
        "\n",
        "# Filtra para focar nos dois principais grupos de representação\n",
        "df_filtrado = df[df['Representação'].isin(['Poder Público', 'Sociedade Civil'])]\n",
        "\n",
        "# Cria a tabela de contingência\n",
        "tabela_contingencia_cat = pd.crosstab(df_filtrado['Representação'], df_filtrado['Categoria'])\n",
        "print(\"\\nTabela de Contagem Absoluta:\")\n",
        "print(tabela_contingencia_cat)\n",
        "\n",
        "# Calcula a proporção percentual\n",
        "tabela_percentual_cat = tabela_contingencia_cat.div(tabela_contingencia_cat.sum(axis=1), axis=0)\n",
        "print(\"\\nTabela de Proporção Percentual:\")\n",
        "print((tabela_percentual_cat * 100).round(2))\n",
        "\n",
        "\n",
        "# --- PASSO 3: GERAR GRÁFICO ---\n",
        "print(\"\\n--- Gerando o Gráfico de Análise Cruzada ---\")\n",
        "fig, ax = plt.subplots(figsize=(12, 6))\n",
        "\n",
        "tabela_percentual_cat.plot(kind='barh', stacked=True, ax=ax, width=0.7)\n",
        "\n",
        "ax.set_title('Composição das Categorias por Tipo de Representação', fontsize=16, weight='bold')\n",
        "ax.set_xlabel('Percentual de Participantes (%)', fontsize=12)\n",
        "ax.set_ylabel('Tipo de Representação', fontsize=12)\n",
        "ax.legend(title='Categoria', bbox_to_anchor=(1.02, 1), loc='upper left')\n",
        "ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{x:.0%}'))\n",
        "\n",
        "# Adiciona os rótulos de porcentagem\n",
        "for container in ax.containers:\n",
        "    ax.bar_label(container, labels=[f'{v:.0%}' if v > 0.02 else '' for v in container.datavalues], label_type='center', color='white', weight='bold')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig('grafico_cruzamento_representacao_categoria.png')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "EIAyqO0SrINa",
        "outputId": "c8639365-0cf6-4112-98ff-044f86e7699b"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Conectando à Planilha Google para carregar a aba 'analise_territorial' ---\n",
            "⚠️ Não foi possível conectar à planilha. Iniciando o PLANO B.\n",
            "Por favor, envie o arquivo 'dados_coedipi - analise_territorial.csv'.\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-a3081b2f-cb02-4f9c-b181-d0c4e2282ee4\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-a3081b2f-cb02-4f9c-b181-d0c4e2282ee4\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving dados_coedipi - analise_territorial.csv to dados_coedipi - analise_territorial (5).csv\n",
            "\n",
            "--- Criando Tabela de Contingência: Representação vs. Categoria ---\n",
            "\n",
            "Tabela de Contagem Absoluta:\n",
            "Categoria        Autoridade  Conselheiro/a  Convidado  Suplente  Titular\n",
            "Representação                                                           \n",
            "Poder Público             3              3         28        31       40\n",
            "Sociedade Civil           0              6         22        23       79\n",
            "\n",
            "Tabela de Proporção Percentual:\n",
            "Categoria        Autoridade  Conselheiro/a  Convidado  Suplente  Titular\n",
            "Representação                                                           \n",
            "Poder Público          2.86           2.86      26.67     29.52    38.10\n",
            "Sociedade Civil        0.00           4.62      16.92     17.69    60.77\n",
            "\n",
            "--- Gerando o Gráfico de Análise Cruzada ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "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ffRRdock/wEff/wx+/bt49SpU4SGhhITE4OzszPe3t5UqVKFdu3aGQp1i4jI483JyYmSJUty4cIFbG1tqVGjRqYmXRARyU6q6SQiIiIiIiIiIlaXfdNXiYiIiIiIiIjIE0tJJxERERERERERsTrVdJIcz2w2k5CQgK2tLTY2NtkdjoiIiIiI/IckJiZiNpvJlSsXtrbqtyHyIJR0khwvISGBI0eOZHcYIiIiIiLyH1apUiUcHByyOwyRx4qSTpLjJX+b8NRTT+lNXh4Jk8nEkSNHqFSpEnZ2dtkdjjyBdI3Jo6ZrTB41XWPyqOXkayw5NvVyEnlwSjpJjpc8pM7Ozi7H/QGSJ4uuMXnUdI3Jo6ZrTB41XWPyqOXka0ylPkQenFK1IiIiIiIiIiJidUo6iYiIiIiIiIiI1SnpJCIiIiIiIiIiVqekk4iIiIiIiIiIWJ2STiIiIiIiIiIiYnWavU5EREREREQkBzCZTMTHx2d3GCIZsre3f6AZJpV0EhEREREREclGiYmJXL16lTt37mR3KCL3lTdvXgoXLoyNjc192yrpJCIiIiIiIpKNkhNOnp6eODs7Z+rDvMi/LTExkejoaK5fvw6Al5fXfbdR0klEREREREQkm5hMJkvCKX/+/Nkdjsg9OTk5AXD9+nU8PT3vO9ROhcRFREREREREsklyDSdnZ+dsjkQkc5Kv1czUH1PSSURERERERCSbaUidPC4e5FpV0klERERERERERKxOSScRERERERERkYcwduxY/Pz8sjuMHEeFxEVERERERETkoQUFBTFp0iR27NjB9evXsbe3p2zZsrRo0YLOnTvj6OiY6X3Nnj0bJycn2rdv/wgjlkdNSScREREREREReSibN29m0KBBODg40LZtW8qWLUt8fDwHDhzghx9+4MyZM3z11VeZ3t/cuXPJly/fY5N0evPNN3n99dezO4wcR0knEREREREREcmyS5cuMXjwYIoUKcL06dPx9PS0rOvevTsXL15k8+bN2RfgIxQdHY2zszO5cuUiVy6lWFJTTScRERERERERybJJkyYRHR3N119/bUg4JStevDi9evUCYOHChbz88svUrl2bihUr0rJlS+bMmWNo36hRI06fPs3evXvx8/PDz8+Pnj17WtaHh4fz9ddf06BBAypWrEjTpk357bffMJvNhv3cvn2b999/n2rVqlGj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vp0mTZpYEk4ApUuXpl69emnap0w4RUREEBoaSq1atbh06RIREREA7Ny5k/j4eHr06GEY8terV680+1u9ejXVq1fHzc2N0NBQy786depgMpnYt2/fPePPCdTTSURERERERESszmQysWLFCvz9/QkODrYsr1y5MlOmTGHXrl3pJm+yIiQkBE9PT1xdXQ3LS5cubVmfUtGiRe+7z9DQUGJjYylevHiadSVLlmTLli2GZQcOHGDs2LEcPnyYmJgYw7qIiAjy5MnD5cuXASw9l5J5eHjg7u5uWHbx4kVOnjxJ7dq1M4wvp1PSSURERERERESsbvfu3dy4cYMVK1awYsWKNOuXLVtGvXr1DD1+UjKbzY8stpS9kqwhKCiIV155hVKlSjFkyBC8vLywt7dny5YtTJs2LUvnYjabqVu3boaFy1MnrnIiJZ1ERERERERExOqWLVtG/vz5052Zbd26daxbt44vvvgCNzc3AMsQtGSpeycBGSaovL292bVrF5GRkYbeTufOnbOsf1AeHh44Ojpy8eLFNOvOnz9veLxx40bi4uIYP368YSjenj17DO2S1124cIFixYpZloeGhhIWFmZo6+PjQ3R0NHXq1Hng2HMK1XQSEREREREREauKjY1l7dq1NGzYkObNm6f51717d6Kioti4cSPe3t7Y2dmlqVE0d+7cNPt1cnICIDw83LC8fv36mEwmZs+ebVg+bdo0bGxsqF+//gOfg52dHfXq1WP9+vWWYXEAZ8+eZfv27WnaQtIseskiIiJYuHChoV2dOnWwt7dn1qxZhrbTp09Pc/wWLVpw6NAhtm3blmZdeHg4CQkJD3xO/zb1dBIRERERERERq9q4cSNRUVE0atQo3fVVqlTBw8ODpUuX0rJlS5o3b86sWbOwsbGhWLFibN68mVu3bqXZrkKFCgAMHz6cevXqYWdnR6tWrWjUqBH+/v78/PPPhISE4Ofnx44dO9iwYQO9evUyzFz3IAYOHMi2bdvo3r07Xbt2xWQyMWvWLHx9fTl58qSlXd26dbG3t6dfv3506dKFqKgoFixYQP78+blx44alnYeHB3369CEgIIA33niDBg0acOzYMbZu3Uq+fPkMx3711VfZuHEj/fr1o127dlSoUIGYmBhOnTrFmjVr2LBhAx4eHlk6r3+Lkk4iIvzzjYnIo6JrTB41XWPyqOkak0fN3t4+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ODjg5+fHkCFDLDO4DR8+nKJFi7J48WLWr19PgQIFeOONNxgwYMBDHb9ly5aMGjWKmJgYWrRokalt3nnnHRwcHJg3bx579uyhcuXKTJkyhTfeeMPQrl+/fsTExLBs2TJWrlzJU089RUBAAD/++KOhnZOTE9OmTeOrr75i1qxZODo60qZNG+rXr0/fvn0Nbdu3b4+joyMTJ05k5MiRODs706RJE95//33c3Nwe6rn4t9kkqrKV5HAmk4nDhw9T5eAQ7EL2Zm8wlTrCS5PotKwTx0OPZ28skm1almzJd/W/43z7l4hNMQ2qiFvrVniPHMn8r/dy81JkdocjIiLy2ChQzJXOn9TCZDJlukD0v8XyeaRKlUcSW2xsLOfPn6dkyZJper0AmMwm7Gyz9znJCTFIznG/azYl1XQSERERERERyaFyQrInJ8QgjyclnURERERERERExOqUdBIREREREREREatT0klERERERERERKxOSScREREREREREbE6JZ1ERERERERERMTqlHQSERERERERERGrU9JJRERERERERESsTkknERERERERERGxOiWdRERERERERETE6pR0EhERERERERERq1PSSURERERERERErE5JJxERERERERF5ojRq1IghQ4Zkdxj/ebmyOwAREREREREReTKdPHmSX375hSNHjnDz5k3y5s2Lr68vjRo1omfPntkd3kPZsmULgYGBDBw4MLtDybHU00lEREREREQkh0o0mbI7hCzHcPDgQV566SVOnDhBx44dGTZsGB07dsTW1pYZM2ZYOcp/35YtWxg3blx2h5GjqaeTiIiIiIiISA5lY2dHyHvvE3fuXLYc36FUKbxH/pClbSdMmECePHn4448/cHNzM6y7deuWNcKTHE5JJxEREREREZEcLO7cOWKPHcvuMB5YUFAQvr6+aRJOAPnz5wcgODiYxo0bM2LECNq3b29o4+fnx4ABAyzD18aOHcu4ceNYuXIlY8aMYdu2bdjb29OmTRvef/99cufOfc94wsPDGTt2LGvXruXWrVt4eXnRsWNH+vbti62trSGeDz74AFdXVyZOnMjVq1fx8/Pjs88+o3LlygAMGTKExYsXW+JMdvLkSQDMZjMzZsxgwYIFBAUFkSdPHpo0acL//d//4e7unpWn87GkpJM8vkrUg1dWZLx+8wjY/C3YO8Fzn0CFF8Ex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f9GzZ0/s7e3p0KEDpUuXBuDs2bOsWLGCHj16MHPmTCpXrmzVYEVERERERETkyeXs7EyzZs34/PPP8fPzs+pwvIYNG9K8eXPDsueee47OnTuzZs0aXnzxRcM6d3d3pk2bhp2dndVi+K/JUtLp559/plChQsyZM4eCBQsa1g0cOJCuXbvy888/M3XqVKsEKSIiIiIiIiLyMBwdHS0/x8fHExkZiY+PD25ubhw7dixN0qlTp05KOD2kLPd06t+/f5qEE0CBAgXo1KkTv/7660MHJyIiIiIiIiJiDbGxsQQEBLBo0SKuXbtmmDEvIiIiTfuUdZ4ka7KUdLK1tcVkMmW43mw2Y2trm+WgREREREREREQy6145imRfffUVixYtolevXlSpUoU8efJgY2PD4MGDDQmoZLlz534Uof6nZCnpVLVqVWbPnk3r1q3x9vY2rLt8+TJz5syhWrVqVglQRERERERERP47bGxsMlzn7u7OpUuX0iy/fPnyffebXLdpyJAhlmV3795Nt5eTWEeWkk7vvvsu3bt3p0WLFjRt2pQSJUoAcP78eTZs2ICdnR3/93//Z804RUREREREROQ/IHkWufDw8DTrihUrxpYtWwgNDcXDwwOAEydOcPDgQby8vO653/TqM82cOTNTvaQka7KUdHrqqadYsGABP//8Mxs3biQmJgZIujCeffZZ3nnnHXx9fa0aqIiIiIiIiIg8+RwdHfH19WXVqlWUKFGCvHnzUqZMGcqWLUuHDh2YNm0ar776Kh06dODWrVvMmzcPX19foqKi7rnfhg0bsmTJElxdXfH19eXw4cPs3LmTvHnz/jsn9h+UpaQTgK+vL7/88gtms5nQ0FAAPDw8VMtJRERERERExIo8vFz+c8cePnw4X331FSNGjCA+Pp4BAwZQtmxZSpcuzXfffceYMWMYMWIEvr6+fP/99yxfvpy9e/fec5+ffPIJtra2LFu2jLt371KtWjWmTp1K3759/6Wz+u/JctIpma2tLQUKFLBGLCIiIiIiIiKSgtmcSNM+FbI9BlvbjOssZcawYcMYNmxYuuu+/fbbNMuqVq3KokWL0m3/wgsv8MILLxiW1atXL027kydPGh67ubkxYsSINO02btxoeNy+fXvat2+f7rHlwTxU0unAgQMcO3aMiIgIzGazYZ2NjQ39+/d/qOBERERERERE/sseNtnzpMQgj6dMJZ02bNhA7dq1cXZ2BuDOnTu88cYbBAYGkpiYiI2NjWV6weSflXQSEREREREREfnvylQBpjlz5tC2bVtLRffvv/+ekydP8uOPP7J+/XoSExOZPHkya9asoUuXLpQvX55t27Y90sBFRERERERERCTnylTS6dtvvyU4OJg7d+4AsHXrVjp37kzLli1xcUkqKmZra0vx4sX57LPP8Pb25ptvvnlkQYuIiIiIiIiISM6WqaTTp59+Su3atcmfPz8A4eHh+Pr6AliSTimnJqxbty7bt2+3dqwiIiIiIiIiIvKYyFTSae/evTzzzDOWxwULFuTmzZsAODg4kD9/fk6cOGFZf+3aNWxsVGhMREREREREROS/KlOFxAcNGkRAQAAtWrSgWLFi1KhRg507d/Lmm28C0KJFCyZPnoydnR1ms5np06fz7LPPPtLARURERERERJ4UyZNzieR0D3KtZirp1KtXL3r16mV53Lt3b7Zt28bdu3fJnTs3AwcO5MyZM4wePRqAmjVrMnTo0AcMW0REREREROS/JVeupI/lCQkJ2RyJSOYkX6vJ1+69ZCrplFq5cuUoV66c5bG7uzvTpk0jPDwcW1tbXF1ds7JbERERERERkf8UOzs77OzsCA8PJ0+ePNkdjsh9hYeHW67b+8lS0ikjbm5u1tydiIiIiIiIyBPNxsYGT09Prly5Qu7cuXFxcVGNZMmREhMTiYqKIjw8HC8vr0xdp1lKOs2YMYMtW7YwefLkdNf37duXRo0a0a1bt6zsXkREREREROQ/w93dnZiYGG7evMmNGzeyOxyRDNnY2JA3b17c3d0z1T5LSac//vjDMJtdar6+vvz+++8888wzrFixgujoaLp06ULx4sWzcjgRERERERGRJ5aNjQ1eXl54enoSHx+f3eGIZMje3j5Tw+qSZSnpdOnSJbp3757h+lKlSjFt2jTefvtt6taty7Zt29ixYwdLly7NyuFEREREREREnniZrZMj8rjIUtLJ3t7+nl3+rl+/jp2dHcuXLweSej599dVXWYtQREREREREREQeO7ZZ2ejpp59m8eLFREZGplkXERHBokWLDMPvzGYzLVu2zHqUIiIiIiIiIiLyWMlST6cBAwbQo0cPXnzxRXr16oWvry8Ap0+fZvr06dy4cYMff/zR0r5z58507tzZOhGLiIiIiIiIiEiOl6Wk09NPP82ECRMYNmwYX3/9tWWavMTERIoWLcr48eOpWrWqVQMVEREREREREZHHR5aSTgB169Zl3bp1HDt2jKCgIAB8fHyoUKGCJQklIiIiIiIiIiL/TVlOOgHY2tpSsWJFKlasaK14RERERERERETkCfBQSaf4+HjOnTtHREQEiYmJadbXrFnzYXYvIiIiIiIiIiKPqSwlncxmMz/++CNz5swhNjY2w3bHjx/PcmAiIiIiIiIiIvL4ylLSacKECUyePJnOnTtTvXp1PvjgA9577z3c3NyYM2cONjY2vP/++9aOVUREREREREREHhO2Wdlo8eLFtGjRgi+++IJnn30WgAoVKtCpUyd+//13bGxs2L17t1UDFRERERERERGRx0eWkk5Xr17lmWeeAcDBwQGAuLg4y+MXXniBJUuWWClEERERERERERF53GQp6ZQ3b16io6MBcHFxwdXVlUuXLhnahIeHP3x0IiIiIiIiIiLyWMpSTaennnqKI0eOWB77+/szffp0ypcvT2JiIjNmzMDPz89qQYqIiIiIiIiIyOMlSz2dOnXqRFxcnGVI3eDBgwkPD6dHjx706NGDqKgohgwZYtVARURERERERETk8ZGlnk6NGzemcePGlse+vr6sX7+ePXv2YGdnR9WqVcmbN6+1YhQRERERERERkcdMlno67du3j9DQUMOyPHny0KRJE5577jnMZjP79u2zSoAiIiIiIiIiIvL4yVLS6eWXX2bHjh0Zrt+9ezcvv/xyloMSEREREREREZHHW5aSTomJifdcHxcXh52dXZYCEhERERERERGRx1+mazpdvnyZkJAQy+Nz586lO4QuPDycefPmUaRIEetEKCIiIiIiIiIij51MJ50WLVrEuHHjsLGxwcbGhgkTJjBhwoQ07RITE7Gzs+OLL76waqAiIiIiIiIiIvL4yHTSqUWLFpQpU4bExETeeecdevbsSY0aNQxtbGxscHJyonz58hQoUMDqwYqIiIiIiIiIyOMh00mn0qVLU7p0aQBGjBhBjRo1KFas2CMLTEREREREREREHl+ZTjql1K5dO2vHISIiIiIiIiIiT5AsJZ0Azp49y8KFCwkODiYsLCzNjHY2NjZMnz79oQMUEREREREREZHHT5aSTn/++Scff/wxuXLlomTJkri5uaVpkzoJJSIiIiIiIiIi/x1ZSjqNGzeO8uXL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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Os dados da contagem estimada final que já calculamos\n",
        "dados_estimados = {\n",
        "    'Agreste/Litoral Sul': 101,\n",
        "    'Seridó': 47,\n",
        "    'Assu/Mossoró': 46,\n",
        "    'Terras Potiguaras': 20,\n",
        "    'Potengi': 18,\n",
        "    'Sertão Central/Cabugi': 18,\n",
        "    'Sertão do Apodi': 10,\n",
        "    'Mato Grande': 10,\n",
        "    'Alto Oeste': 6\n",
        "}\n",
        "contagem_estimada_final = pd.Series(dados_estimados)\n",
        "\n",
        "# --- GERANDO O GRÁFICO DE PIZZA ---\n",
        "print(\"\\n--- Gerando Gráfico de Pizza da Distribuição Estimada por Território ---\")\n",
        "\n",
        "plt.figure(figsize=(12, 10))\n",
        "\n",
        "# \"Explode\" a maior fatia para dar destaque\n",
        "explode = [0.05 if i == 0 else 0 for i in range(len(contagem_estimada_final))]\n",
        "\n",
        "# Cria o gráfico\n",
        "plt.pie(contagem_estimada_final,\n",
        "        labels=contagem_estimada_final.index,\n",
        "        autopct='%1.1f%%', # Formato da porcentagem\n",
        "        startangle=140,\n",
        "        pctdistance=0.85,\n",
        "        explode=explode,\n",
        "        colors=sns.color_palette('terrain', n_colors=len(contagem_estimada_final)))\n",
        "\n",
        "# Adiciona um círculo no centro para criar um \"Gráfico de Rosca\" (Donut Chart), que é visualmente mais agradável\n",
        "centre_circle = plt.Circle((0,0),0.70,fc='white')\n",
        "fig = plt.gcf()\n",
        "fig.gca().add_artist(centre_circle)\n",
        "\n",
        "plt.title('Distribuição Percentual Estimada por Território', fontsize=16, weight='bold')\n",
        "plt.axis('equal')  # Garante que a pizza seja um círculo.\n",
        "plt.tight_layout()\n",
        "plt.savefig('grafico_pizza_territorio.png')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "l_Wb3sDprr1g",
        "outputId": "3d424ee4-d56c-4ab3-8b1f-6b7ca4412aaf"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Gerando Gráfico de Pizza da Distribuição Estimada por Território ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "IEWkaGZrrvwW"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}